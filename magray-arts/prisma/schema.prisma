// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  
  // Customer specific fields
  phone         String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cartItems     CartItem[]
  favorites     Favorite[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
}

model Product {
  id            String    @id @default(cuid())
  name          String
  description   String
  price         Float
  comparePrice  Float?
  images        String    // JSON string of array
  slug          String    @unique
  sku           String?   @unique
  stock         Int       @default(0)
  isActive      Boolean   @default(true)
  isFeatured    Boolean   @default(false)
  
  // Product details
  materials     String?
  dimensions    String?
  weight        Float?
  origin        String?   @default("Kashmir")
  
  // Category
  categoryId    String
  category      Category  @relation(fields: [categoryId], references: [id])
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orderItems    OrderItem[]
  cartItems     CartItem[]
  favorites     Favorite[]
  reviews       Review[]
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

model Favorite {
  id        String  @id @default(cuid())
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Pricing
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  total           Float
  currency        String      @default("USD")
  
  // Shipping Info
  shippingName    String
  shippingEmail   String
  shippingPhone   String?
  shippingAddress String
  shippingCity    String
  shippingCountry String
  shippingPostal  String
  
  // Payment Info
  stripePaymentId String?
  
  // Notes
  notes           String?
  
  // Relations
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id          String  @id @default(cuid())
  quantity    Int
  price       Float
  productName String
  productImage String?
  
  // Relations
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
}

model Review {
  id        String @id @default(cuid())
  rating    Int    // 1-5 stars
  comment   String?
  isApproved Boolean @default(false)
  
  // Relations
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  COD
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
